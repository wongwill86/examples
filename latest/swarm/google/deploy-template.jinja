resources:
    - name: {{ env["deployment"] }}-bootstrap
      type: compute.v1.instance
      properties:
          zone: {{ properties["zone"] }}
          machineType: https://www.googleapis.com/compute/v1/projects/{{ env["project"] }}/zones/{{ properties["zone"] }}/machineTypes/{{ properties["instanceTypeManager"] }}
          disks:
              - type: PERSISTENT
                boot: true
                autoDelete: true
                initializeParams:
                    sourceImage: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1604-xenial-v20171011
          tags:
              items:
                  - princeton-access
                  - http-server
                  - https-server
          metadata:
              items:
                  - key: infrakit--scope
                    value: {{ env["deployment"] }}
                  - key: infrakit--group
                    value: managers
                  - key: infrakit--role
                    value: managers
                  - key: infrakit--config_sha
                    value: bootstrap
                  - key: infrakit-logical-id
                    value: {{ properties["managerIP0"] }}
                  - key: infrakit-gcp-version
                    value: 1
                  - key: startup-script
                    value: |
                        #!/bin/bash
                        wget -qO- https://get.docker.com/ | sh
                        mkdir -p /infrakit
                        docker swarm init
                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v /infrakit:/infrakit \
                        {{ properties["image"] }} \
                        infrakit util init --group-id managers --start combo --start swarm \
                        --var /cluster/provider=google \
                        --var /cluster/tag/user={{ properties["user" ] }} \
                        --var /cluster/tag/project={{ properties["project" ] }} \
                        --var /cluster/name={{ env["deployment" ] }} \
                        --var /cluster/swarm/manager/ips/0={{ properties["managerIP0"] }} \
                        --var /cluster/swarm/manager/ips/1={{ properties["managerIP1"] }} \
                        --var /cluster/swarm/manager/ips/2={{ properties["managerIP2"] }} \
                        --var /cluster/swarm/manager/ips/3={{ properties["managerIP3"] }} \
                        --var /cluster/swarm/manager/ips/4={{ properties["managerIP4"] }} \
                        --var /cluster/size/manager={{ properties["sizeManager"] }} \
                        --var /cluster/size/worker={{ properties["sizeWorker"] }} \
                        --var /cluster/instanceType/manager={{ properties["instanceTypeManager"] }} \
                        --var /cluster/instanceType/worker={{ properties["instanceTypeWorker"] }} \
                        --var /infrakit/config/root={{ properties["configRoot"] }} \
                        --var /infrakit/metadata/configURL={{ properties["configURL"] }} \
                        --var /provider/image/hasDocker=no \
                        --var /infrakit/docker/image={{ properties["image"] }} \
                        {{ properties["configRoot"] }}/groups.json \
                        | tee /var/lib/infrakit.boot | sh
                        echo '{{ properties["user"] }}' | docker secret create basic_auth_username -
                        echo '{{ properties["password"] }}' | docker secret create basic_auth_password -
                        sudo openssl genrsa 2048 | tee >(
                            docker secret create ssl_certificate_key -) |
                            sudo openssl req -x509 -nodes -days 365 -new -key /dev/stdin -subj "/C=US/ST=NJ/L=P/O=P/OU=SL/CN=SEURON" |
                            docker secret create ssl_certificate -
                        export INFRAKIT_GROUPS_URL={{ properties["configURL"] }}
                        export INFRAKIT_IMAGE={{ properties["image"] }}
                        echo INFRAKIT_GROUPS_URL={{ properties["configURL"] }} >> /etc/environment
                        echo INFRAKIT_IMAGE={{ properties["image"] }} >> /etc/environment
                        while [ $(docker node ls -f 'role=manager' -q | wc -l ) -lt {{ properties["sizeManager"] }} ]; do
                           echo 'Waiting for managers to be online before deploy';
                           sleep 10;
                        done
                        wget -O compose.yml {{ properties["composeLocation"] }}
                        docker stack deploy -c compose.yml {{ env["deployment"] }}
          networkInterfaces:
              - network: $(ref.{{ env["deployment"] }}-network.selfLink)
                networkIP: {{ properties["managerIP0"] }}
                accessConfigs:
                 - type: ONE_TO_ONE_NAT
                   name: External NAT
          serviceAccounts:
              - scopes:
                    - https://www.googleapis.com/auth/cloud-platform
                    - https://www.googleapis.com/auth/compute
                    - https://www.googleapis.com/auth/servicecontrol
                    - https://www.googleapis.com/auth/service.management.readonly
                    - https://www.googleapis.com/auth/logging.write
                    - https://www.googleapis.com/auth/monitoring.write
                    - https://www.googleapis.com/auth/trace.append
                    - https://www.googleapis.com/auth/devstorage.read_only
                    - https://www.googleapis.com/auth/cloud.useraccounts.readonly
    - name: {{ env["deployment"] }}-network
      type: compute.v1.network
      properties:
          IPv4Range: 172.31.16.0/20
    - name: {{ env["deployment"] }}-firewall
      type: compute.v1.firewall
      properties:
          allowed:
              - IPProtocol: tcp
                ports:
                    - 22
                    - 65535
                    - 24864
          network: $(ref.{{ env["deployment"] }}-network.selfLink)
    - name: {{ env["deployment"] }}-firewall-internal
      type: compute.v1.firewall
      properties:
          allowed:
              - IPProtocol: tcp
          sourceRanges:
              - 172.31.16.0/20
          network: $(ref.{{ env["deployment"] }}-network.selfLink)
# vim: set filetype=yaml:
